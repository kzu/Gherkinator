<Project>

  <PropertyGroup>
    <GetPackageVersionDependsOn>$(GetPackageVersionDependsOn);SetVersions</GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="SetVersions"
          BeforeTargets="GetAssemblyVersion;GetPackageVersion;Pack"
          DependsOnTargets="GitVersion"
          Returns="$(Version)"
          Condition="'$(GitInfoImported)' == 'true' And '$(ExcludeRestorePackageImports)' != 'true'">
    
    <PropertyGroup>
      <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' != ''">$(SYSTEM_PULLREQUEST_TARGETBRANCH)</GitBranch>
      <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' == '' and '$(BUILD_SOURCEBRANCHNAME)' != ''">$(BUILD_SOURCEBRANCHNAME)</GitBranch>
      <GitBranch Condition="'$(APPVEYOR_REPO_BRANCH)' != ''">$(APPVEYOR_REPO_BRANCH)</GitBranch>
    </PropertyGroup>

    <ItemGroup>
      <VersionMetadata Include="$(GitCommits)"/>

      <VersionMetadata Condition="$(CI) and '$(BUILD_REASON)' == 'PullRequest'"
                       Include="pr.$(SYSTEM_PULLREQUEST_PULLREQUESTNUMBER)"/>

      <VersionMetadata Include="sha.$(GitCommit)"/>

      <VersionMetadata Condition="$(CI)" 
                       Include="vsts.$(BUILD_BUILDID)"/>
    </ItemGroup>

    <PropertyGroup>
      <VersionMetadataLabel>@(VersionMetadata -> '%(Identity)', '-')</VersionMetadataLabel>
      <VersionMetadataPlusLabel Condition="'$(VersionMetadataLabel)' != ''">+$(VersionMetadataLabel)</VersionMetadataPlusLabel>
      <PackageVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)$(GitSemVerDashLabel)</PackageVersion>
      <Version>$(PackageVersion)$(VersionMetadataPlusLabel)</Version>

      <Description>Built from $(GitBranch)@$(GitCommit)</Description>
    </PropertyGroup>

    <Message Condition="$(CI)" Importance="high" Text="##vso[build.updatebuildnumber]$(Version)"/>
  </Target>

  <Target Name="DeletePackageFromLocalCache" Condition="'$(CI)' != 'true'" AfterTargets="Pack">
    <Exec Command='rd "$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())" /q /s' Condition="Exists('$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())')" />
  </Target>

  <PropertyGroup>
    <DirectoryBuildTargets>$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)..'))</DirectoryBuildTargets>
  </PropertyGroup>

  <Import Project="$(DirectoryBuildTargets)" Condition="Exists('$(DirectoryBuildTargets)')"/>
</Project>
